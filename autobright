#!/bin/bash

REQUIRED_CONFIG_KEYS=('VIDEO_DEV' 'BACKLIGHT_TYPE' 'STEPS' 'STEP_DELAY' 'PAUSE' 'CHECK_SCREEN_STATE' 'MIN_BRIGHTNESS_DIFF' 'BACKLIGHT_CLASS_DIR' 'CORRECTION')
TRUE_FALSE_KEYS=('CHECK_SCREEN_STATE')
MIN_AMBIENT=0
MAX_AMBIENT=255

function crash() {
	echo "$@" 1>&2
	exit 1
}

function error() {
	echo "$@" 1>&2
}

function print_usage() {
	echo "Usage: "
	echo "$0 [-c config_file] | [-h]"
	echo "	-c	path to a config file"
	echo "	-h	show this help"
}

function check_args_count() {
	if [[ $# -lt 1 ]]; then
		crash "No options provided! Use -h to show available options."
	fi
}

function percents_of() {
	local value="$1"
	local percents="$2"
	local result=$(bc -l <<<"$value * $percents / 100")
	echo "$result"
}

function screen_on() {
	local real_brightness=$(<"$BACKLIGHT_PATH/actual_brightness")
	if [[ $real_brightness -eq 0 ]]; then
		return 1
	fi
}

function get_ambient() {
	local ambient=$(ffmpeg -i $VIDEO_DEV -vf scale=1:1 -pix_fmt gray -f rawvideo -frames:v 1 -v quiet pipe:1 | od -t u | sed 's/000000[01]\s*//')
	echo "$ambient"
}

function get_curr_brightness() {
	local brightness=$(<"$BACKLIGHT_PATH/brightness")
	echo "$brightness"
}

function set_brightness() {
	local brightness="$1"
	echo "$brightness" >>"$BACKLIGHT_PATH/brightness"
}

function get_max_brightness() {
	local max_brightness=$(<"$BACKLIGHT_PATH/max_brightness")
	echo "$max_brightness"
}

function set_brightness_smooth() {
	local new_brightness="$1"
	local curr_brightness=$(get_curr_brightness)
	incr=$((($new_brightness - $curr_brightness) / $STEPS))
	if [[ $incr -eq 0 ]]; then
		incr=$(($new_brightness > $curr_brightness ? 1 : -1))
	fi
	for br in $(seq $curr_brightness $incr $new_brightness); do
		set_brightness $br
		sleep $STEP_DELAY
	done
	set_brightness $new_brightness
}

function round() {
	local value="$1"
	local result=$(printf "%.0f\n" "$value")
	echo "$result"
}

function float_pow() {
	local base="$1"
	local power="$2"
	if [[ $base -eq 0 ]]; then
		echo "0"
	else
		local result=$(bc -l <<<"e(l($base) * $power)")
		echo "$result"
	fi
}

function rremap() {
	local value="$1"
	local min="$2"
	local max="$3"
	local new_min="$4"
	local new_max="$5"
	local result=$(bc -l <<<"($value - $min) * ($new_max - $new_min) / ($max - $min) + $new_min")
	echo "$result"
}

function read_config() {
	local CONFIG_PATH="$1"
	while read -r line; do
		if [[ "$line" == \#* || -z "$line" ]]; then
			continue
		fi
		IFS='=' read -r key value <<<"$line"
		export $key="${value//\"/}"
	done <"$CONFIG_PATH"
}

function check_configuration() {
	for param in ${REQUIRED_CONFIG_KEYS[*]}; do
		if [[ -z ${!param+x} ]]; then
			crash "Missing ${param} parameter in config!"
		fi
	done
	for param in ${TRUE_FALSE_KEYS[*]}; do
		if ! [[ ${!param} -eq 1 ]] || [[ ${!param} -eq 0 ]]; then
			crash "Only 1 and 0 are valid values for ${param}!"
		fi
	done
	if [[ ! -c "$VIDEO_DEV" ]]; then
		crash ""$VIDEO_DEV" is not a valid video device!"
	fi
	if [[ ! -d "$BACKLIGHT_CLASS_DIR" ]]; then
		crash ""$BACKLIGHT_CLASS_DIR" does not exist!"
	fi
	if [[ "$CORRECTION" == "crt" ]]; then
		if [[ -z "$CRT_GAMMA" ]]; then
			crash "'crt' correction requires CRT_GAMMA parameter in config!"
		fi
	fi
	if [[ -z "$MIN" ]] && [[ -z "$MIN_PERCENT" ]]; then
		crash "Option MIN or MIN_PERCENT must be specified in config!"
	fi
	if [[ -z "$MAX" ]] && [[ -z "$MAX_PERCENT" ]]; then
		crash "Option MAX or MAX_PERCENT must be specified in config!"
	fi
}

function post_configuration() {
	if [[ "$BACKLIGHT_TYPE" == "auto" ]]; then
		BACKLIGHT_PATH="$(auto_backlight_path)"
	else
		BACKLIGHT_PATH="${BACKLIGHT_CLASS_DIR}/${BACKLIGHT_TYPE}_backlight"
	fi
	if [[ ! -z "$MIN" ]]; then
		MIN_BR="$MIN"
	else
		local min_br_fl=$(percents_of "$(get_max_brightness)" "$MIN_PERCENT")
		MIN_BR=$(round "$min_br_fl")
	fi
	if [[ ! -z "$MAX" ]]; then
		MAX_BR="$MAX"
	else
		local max_br_fl=$(percents_of "$(get_max_brightness)" "$MAX_PERCENT")
		MAX_BR=$(round "$max_br_fl")
	fi
}

function check_post_confuguration() {
	if [[ ! -d "$BACKLIGHT_PATH" ]]; then
		crash "Backlight device '$BACKLIGHT_PATH' does not exist! Check BACKLIGHT_CLASS_DIR and BACKLIGHT_TYPE"
	fi
}

function auto_backlight_path() {
	local backlight_path=$(find ${BACKLIGHT_CLASS_DIR} -type l -iname '*backlight*' | head -n 1)
	if [[ -z "$backlight_path" ]]; then
		crash "Failed to find backlight device automatically! Specify it manually in config!"
	else
		echo "$backlight_path"
	fi
}

function parse_arguments() {
	while getopts 'c:h' arg; do
		case $arg in
		h)
			print_usage
			exit 0
			;;
		c)
			read_config "$OPTARG"
			;;
		esac
	done
}

function ambient_to_brightness() {
	local ambient="$1"
	local brightness=$(rremap "$ambient" "$MIN_AMBIENT" "$MAX_AMBIENT" "$MIN_BR" "$MAX_BR")
	echo "$brightness"
}

function calculate_brightness_linear() {
	local ambient="$1"
	local new_brightness=$(ambient_to_brightness "$ambient")
	local new_brightness=$(round "$new_brightness")
	echo "$new_brightness"
}

function calculate_brightness_crt() {
	local ambient="$1"
	local corrected_ambient=$(bc -l <<<"$MAX_AMBIENT / $(float_pow $MAX_AMBIENT $CRT_GAMMA) * $(float_pow $ambient $CRT_GAMMA)")
	local new_brightness=$(ambient_to_brightness "$corrected_ambient")
	local new_brightness=$(round "$new_brightness")
	echo "$new_brightness"
}

function check_brightness_diff() {
	local new_brightness="$1"
	local curr_brightness=$(get_curr_brightness)
	local brightness_diff=$(($new_brightness - $curr_brightness))
	if [[ ${brightness_diff#-} -lt $MIN_BRIGHTNESS_DIFF ]]; then
		return 1
	fi
}

function calculate_brightness() {
	local ambient="$1"
	case "$CORRECTION" in
	"crt")
		local new_brightness=$(calculate_brightness_crt "$ambient")
		;;
	"linear")
		local new_brightness=$(calculate_brightness_linear "$ambient")
		;;
	esac
	echo "$new_brightness"
}

function regulator() {
	while true; do
		sleep $PAUSE
		if [[ "$CHECK_SCREEN_STATE" -eq 1 ]] && ! screen_on; then
			continue
		fi
		local ambient=$(get_ambient)
		if [[ -z "$ambient" ]]; then
			continue
		fi
		local new_brightness=$(calculate_brightness "$ambient")
		if check_brightness_diff "$new_brightness"; then
			set_brightness_smooth "$new_brightness" &
		fi
	done
}

check_args_count $@
parse_arguments $@
check_configuration
post_configuration
check_post_confuguration
echo "$MIN_BR $MAX_BR"
regulator
